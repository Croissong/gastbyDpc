#+PROPERTY: tangle "./documentation.sql"
#+OPTIONS: toc:nil num:nil
#+HTML: <title>Datenbank erstellen</title>
#+PROPERTY: header-args :engine mysql :dbuser root :dbpassword root :results silent
* Datenbank löschen, erstellen & auswählen
#+BEGIN_SRC sql
DROP DATABASE IF EXISTS hotelbuchung;
CREATE DATABASE hotelbuchung;
USE hotelbuchung;
#+END_SRC
* Tabellen erstellen & befüllen
:PROPERTIES:
:header-args+: :database hotelbuchung
:END:      
** Gast-Tabelle erstellen
#+BEGIN_SRC sql
CREATE TABLE gast(
        gast_id INT AUTO_INCREMENT NOT NULL PRIMARY KEY, 
        anrede VARCHAR(15),
        vorname VARCHAR(45),
        nachname VARCHAR(45));
#+END_SRC
*** Daten
#+BEGIN_SRC sql
INSERT INTO gast (anrede, vorname, nachname) VALUES
('Herr', 'Max', 'Mustermann'),
('Herr', 'Hans', 'Peter'),
('Frau', 'Lisa', 'Langfinger');
#+END_SRC
#+BEGIN_SRC sql :results replace value table :exports results 
SELECT gast_id as ID, anrede as Anrede, vorname as Vorname, nachname as Nachname FROM gast;
#+END_SRC
#+ATTR_HTML: :drawer Gast-Tabelle
#+RESULTS:

** Zimmer-Tabelle erstellen
#+BEGIN_SRC sql
CREATE TABLE IF NOT EXISTS zimmer (
        zimmer_id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
        room_number VARCHAR(15),
        beschreibung VARCHAR(45));
#+END_SRC
*** Mit Daten befüllen
#+BEGIN_SRC sql
INSERT INTO zimmer (room_number, beschreibung) VALUES
(1, 'Einzelzimmer'),
(2, 'Einzelzimmer'),
(3, 'Doppelzimmer');
#+END_SRC
#+BEGIN_SRC sql :results replace value table :exports results 
SELECT zimmer_id as ID, room_number as Zimmernummer, beschreibung as Beschreibung FROM zimmer;
#+END_SRC
#+ATTR_HTML: :drawer Zimmer-Tabelle
#+RESULTS:
| ID | Zimmernummer | Beschreibung |
|----+--------------+--------------|
|  1 |            1 | Einzelzimmer |
|  2 |            2 | Einzelzimmer |
|  3 |            3 | Doppelzimmer |

** Status-Tabelle
#+BEGIN_SRC sql
CREATE TABLE IF NOT EXISTS status (
        status_id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
        title VARCHAR(45),
        color VARCHAR(6));
#+END_SRC
*** Mit Daten befüllen
Neben des Standard-Status 'frei' gibt es drei Stadien in denen sich ein Zimmer befinden kann.  
#+BEGIN_SRC sql
INSERT INTO status (title, color) VALUES
('belegt', 'FFFFFF'),
('gesperrt', '0000FF'),
('reserviert', 'FFFF00');
#+END_SRC
#+BEGIN_SRC sql :results replace value table :exports results 
SELECT status_id as ID, title as Bezeichnung, color as Farbkennung FROM status;
#+END_SRC
#+ATTR_HTML: :drawer Status-Tabelle
#+RESULTS:
| ID | Bezeichnung | Farbkennung |
|----+-------------+-------------|
|  1 | belegt      | FFFFFF      |
|  2 | gesperrt    | 0000FF      |
|  3 | reserviert  | FFFF00      |

** Belegung-Tabelle erstellen
#+BEGIN_SRC sql
CREATE TABLE IF NOT EXISTS belegung (
		belegung_id INT AUTO_INCREMENT NOT NULL PRIMARY KEY, 
		startDate DATE, endDate DATE, gast_id INT, status_id INT, zimmer_id INT, 
		FOREIGN KEY (gast_id) REFERENCES gast(gast_id) ON DELETE CASCADE, 
		FOREIGN KEY (status_id) REFERENCES status(status_id) ON DELETE CASCADE, 
		FOREIGN KEY (zimmer_id) REFERENCES zimmer(zimmer_id) ON DELETE CASCADE
);
#+END_SRC
*** Belegungen
#+BEGIN_SRC sql
INSERT INTO belegung (startDate, endDate, gast_id, status_id, zimmer_id) VALUES
('2016-04-04', '2016-04-07', 1, 1, 1),
('2016-04-04', '2016-04-07', 2, 2, 2),
('2016-04-04', '2016-04-07', 3, 3, 2),
('2016-04-04', '2016-04-07', 2, 1, 3);
#+END_SRC
#+BEGIN_SRC sql :results replace value table :exports results 
SELECT belegung_id as ID, startDate, endDate, gast_id, status_id, zimmer_id FROM belegung;
#+END_SRC
#+ATTR_HTML: :drawer Belegungs-Tabelle
#+RESULTS:
| ID |  startDate |    endDate | gast_id | status_id | zimmer_id |
|----+------------+------------+---------+-----------+-----------|
|  1 | 2016-04-04 | 2016-04-07 |       1 |         1 |         1 |
|  2 | 2016-04-04 | 2016-04-07 |       2 |         2 |         2 |
|  3 | 2016-04-04 | 2016-04-07 |       3 |         3 |         2 |
|  4 | 2016-04-04 | 2016-04-07 |       2 |         1 |         3 |

* Questions
:header-args: :database hotelbuchung :results value
:PROPERTIES:
:END:      
#+BEGIN_SRC sql
b_a.status_id=2 or
b_a.status_id=3;
select * from not_available;
create view not_available as select belegung_id from belegung as b join beleg_art as b_a on b.status_id = b_a.status_id where b_a.status_id=1 or
#+END_SRC
#+BEGIN_SRC sql
create view available as select belegung_id from zimmer as b join beleg_art as b_a on b.status_id = b_a.status_id where b_a.status_id=1 or
b_a.status_id=2 or
b_a.status_id=3;
select * from not_available;
#+END_SRC


# Local Variables:
# org-confirm-babel-evaluate: nil
# org-use-property-inheritance: t
# End:
